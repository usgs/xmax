import groovy.json.JsonSlurper
import java.text.SimpleDateFormat

plugins {
    id 'java'
    id 'application'
    id 'java-library'
    id 'idea'
    // id "com.github.bjornvester.xjc" version "1.5.0"
}

mainClassName = "com.isti.xmax.XMAX"
def progTitle = "XMAX"

/* Get first three version numbers from code.json */
def codeJson = new JsonSlurper().parseText(new File("$projectDir", "code.json").text)
// NOTE: codeJson.version is a String[], and any IDE warning here can be safely ignored
def jsonVersion = codeJson.version[0]
/* Get last version number from commit counts */
def lastTagHash = "git rev-list --tags --max-count=1".execute().text
def commitCount = "NO_TAG_PRESENT"
if (! lastTagHash.isEmpty()){
    lastTagHash = lastTagHash.substring(0, lastTagHash.length() - 1)
    commitCount = ("git rev-list "+lastTagHash+".. --count").execute().text
    commitCount = commitCount.substring(0, commitCount.length() - 1)
}
if (commitCount == "NO_TAG_PRESENT") {
    commitCount = "0"
}
def version = "$jsonVersion.$commitCount"

tasks.withType(JavaCompile) {
    options.compilerArgs << "-Xlint:deprecation"
}

sourceCompatibility = '1.8'
targetCompatibility = '1.8'

repositories {
    mavenCentral()
    maven {
        // used to use http:, but that is not going to be supported in gradle 7
        url "https://www.seis.sc.edu/software/maven2"
    }
}

configurations {
    sourceOnly
    classpath.exclude group: 'edu.iris.dmc.seedcodec', module: 'JEvalResp'
}


dependencies {
    // this should include seisfile, seedcodec, and commons math3 as dependencies, hence 'api' tag
    // to allow access to those by the project as necessary
    api project(':asl-java-utils')
    implementation files('./lib/ekit-1.4.jar')

    // some library components require xml bindings to function which we'll include explicitly here
    // (in particular stuff related to picks and the jevalresp library)
    implementation group: 'javax.xml.bind', name: 'jaxb-api', version: '2.3+'
    sourceOnly group: 'javax.xml.bind', name: 'jaxb-api', version: '2.3+', classifier: 'sources'
    implementation group: 'com.sun.xml.bind', name: 'jaxb-core', version: '2.3+'
    sourceOnly group: 'com.sun.xml.bind', name: 'jaxb-core', version: '2.3+', classifier: 'sources'
    implementation group: 'com.sun.xml.bind', name: 'jaxb-impl', version: '2.3+'
    sourceOnly group: 'com.sun.xml.bind', name: 'jaxb-impl', version: '2.3+', classifier: 'sources'
    implementation group: 'com.sun.activation', name: 'javax.activation', version: '1.2.0'
    sourceOnly group: 'com.sun.activation', name: 'javax.activation', version: '1.2.0',
            classifier: 'sources'

    // used as an API so some jcommon (ui) stuff is exposed to xmax
    implementation group: 'org.jfree', name: 'jfreechart', version: '1.5.+'
    sourceOnly group: 'org.jfree', name: 'jfreechart', version: '1.5.+', classifier: 'sources'
    implementation group: 'org.jfree', name: 'jcommon', version: '1.0.+'
    sourceOnly group: 'org.jfree', name: 'jcommon', version: '1.0.+', classifier: 'sources'
    // this should include encode method for steim2 data
    api group: 'edu.sc.seis', name: 'seedCodec', version: '1.0.11+'
    sourceOnly group: 'edu.sc.seis', name: 'seedCodec', version: '1.0.11+', classifier: 'sources'

    implementation group: 'commons-cli', name: 'commons-cli', version: '1.2'
    sourceOnly group: 'commons-cli', name: 'commons-cli', version: '1.2', classifier: 'sources'
    implementation group: 'commons-configuration', name: 'commons-configuration', version: '1.7+'
    sourceOnly group: 'commons-configuration', name: 'commons-configuration', version: '1.7+',
            classifier: 'sources'
    implementation group: 'commons-codec', name: 'commons-codec', version: '1.5'
    sourceOnly group: 'commons-codec', name: 'commons-codec', version: '1.5', classifier: 'sources'
    implementation group: 'commons-lang', name: 'commons-lang', version: '2.6'
    sourceOnly group: 'commons-lang', name: 'commons-lang', version: '2.6', classifier: 'sources'
    implementation group: 'commons-logging', name: 'commons-logging', version: '1.1.1'
    sourceOnly group: 'commons-logging', name: 'commons-logging', version: '1.1.1',
            classifier: 'sources'
    implementation group: 'org.jdom', name: 'jdom', version: '1.1'
    sourceOnly group: 'org.jdom', name: 'jdom', version: '1.1', classifier: 'sources'
    implementation group: 'edu.emory.mathcs', name: 'JTransforms', version: '2.4'
    sourceOnly group: 'edu.emory.mathcs', name: 'JTransforms', version: '2.4',
            classifier: 'sources'
    implementation group: 'log4j', name: 'log4j', version: '1.2.16'
    sourceOnly group: 'log4j', name: 'log4j', version: '1.2.16', classifier: 'sources'
    implementation group: 'org.reflections', name: 'reflections', version: '0.9.10'
    sourceOnly group: 'org.reflections', name: 'reflections', version: '0.9.10',
            classifier: 'sources'

    implementation group: 'edu.sc.seis', name: 'TauP', version: '2.5.0'
    sourceOnly group: 'edu.sc.seis', name: 'TauP', version: '2.5.0', classifier: 'sources'

    testImplementation group: 'junit', name: 'junit', version: '4.+'
}

tasks.withType(Jar){
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    // from sourceSets.main.allSource
}

task sourcesJar(type: Jar, dependsOn: configurations.sourceOnly){
    classifier = 'sources'
    // archiveBaseName = rootProject.name
    archiveVersion = version
    manifest {
        attributes 'Implementation-Title': progTitle,
                'Implementation-Version': archiveVersion,
                'Build-Timestamp': new SimpleDateFormat("yyyy.MM.dd").format(new Date())
    }
    from sourceSets.main.allSource
    from project(':asl-java-utils').sourceSets.main.allSource
    // Adds all dependent libraries
    dependsOn configurations.sourceOnly
    from {
        configurations.sourceOnly.collect {
            it.isDirectory() ? it : zipTree(it)
        }
    }
    from {
        configurations.sourceOnly.collect {
            it.isDirectory() ? it : zipTree(it)
        }
    }

    with jar
}

jar {
    /* Adds all dependent libraries*/
    dependsOn configurations.runtimeClasspath
    from {
        configurations.runtimeClasspath.collect {
            it.isDirectory() ? it : zipTree(it)
        }
    }
    dependsOn configurations.compileClasspath
    from {
        configurations.compileClasspath.collect {
            it.isDirectory() ? it : zipTree(it)
        }
    }

    archiveVersion = version
    archiveBaseName = rootProject.name
    manifest {
        attributes 'Implementation-Title': progTitle,
                   'Implementation-Version': archiveVersion,
                   'Main-Class': mainClassName,
                   'Build-Timestamp': new SimpleDateFormat("yyyy.MM.dd").format(new Date())
    }
    // with jar
}

/*Turn off doclint since it is far too strict and breaks the javadoc everytime*/
if (JavaVersion.current().isJava8Compatible()) {
    allprojects {
        tasks.withType(Javadoc) {
            options.addStringOption('Xdoclint:none', '-quiet')
        }
    }
}

test {
    maxHeapSize = "4096m"
    maxParallelForks = 4
    testLogging {
        events "skipped", "failed"
        exceptionFormat "full"
        afterSuite { desc, result ->
            if (!desc.parent) {
                println "Result: ${result.resultType} (${result.testCount} tests, " +
                        "${result.successfulTestCount} successes, ${result.failedTestCount} " +
                        "failures, ${result.skippedTestCount} skipped)"
            }
        }
    }
}

gradle.beforeProject {
    println("Perform pre-project setup")
    def sout = new StringBuilder()
    def serr = new StringBuilder()
    println("Updating gitsubmodules")
    def proc = "git submodule update --init --recursive".execute()
    proc.consumeProcessOutput(sout, serr)
    proc.waitFor()
    print sout
    print serr
    println("Done with pre-project setup")
}

sourcesJar.dependsOn(build)

javadoc {
    options.memberLevel = JavadocMemberLevel.PRIVATE
}


